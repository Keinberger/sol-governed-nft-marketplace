// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NftBought extends ethereum.Event {
  get params(): NftBought__Params {
    return new NftBought__Params(this);
  }
}

export class NftBought__Params {
  _event: NftBought;

  constructor(event: NftBought) {
    this._event = event;
  }

  get nftAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NftDelisted extends ethereum.Event {
  get params(): NftDelisted__Params {
    return new NftDelisted__Params(this);
  }
}

export class NftDelisted__Params {
  _event: NftDelisted;

  constructor(event: NftDelisted) {
    this._event = event;
  }

  get nftAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NftListed extends ethereum.Event {
  get params(): NftListed__Params {
    return new NftListed__Params(this);
  }
}

export class NftListed__Params {
  _event: NftListed;

  constructor(event: NftListed) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokensForPayment(): Array<Address> {
    return this._event.parameters[4].value.toAddressArray();
  }
}

export class NftPaymentTokenAdded extends ethereum.Event {
  get params(): NftPaymentTokenAdded__Params {
    return new NftPaymentTokenAdded__Params(this);
  }
}

export class NftPaymentTokenAdded__Params {
  _event: NftPaymentTokenAdded;

  constructor(event: NftPaymentTokenAdded) {
    this._event = event;
  }

  get nftAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get paymentTokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class NftPaymentTokenRemoved extends ethereum.Event {
  get params(): NftPaymentTokenRemoved__Params {
    return new NftPaymentTokenRemoved__Params(this);
  }
}

export class NftPaymentTokenRemoved__Params {
  _event: NftPaymentTokenRemoved;

  constructor(event: NftPaymentTokenRemoved) {
    this._event = event;
  }

  get nftAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get paymentTokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class NftPriceUpdated extends ethereum.Event {
  get params(): NftPriceUpdated__Params {
    return new NftPriceUpdated__Params(this);
  }
}

export class NftPriceUpdated__Params {
  _event: NftPriceUpdated;

  constructor(event: NftPriceUpdated) {
    this._event = event;
  }

  get nftAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PaymentTokenAdded extends ethereum.Event {
  get params(): PaymentTokenAdded__Params {
    return new PaymentTokenAdded__Params(this);
  }
}

export class PaymentTokenAdded__Params {
  _event: PaymentTokenAdded;

  constructor(event: PaymentTokenAdded) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PaymentTokenRemoved extends ethereum.Event {
  get params(): PaymentTokenRemoved__Params {
    return new PaymentTokenRemoved__Params(this);
  }
}

export class PaymentTokenRemoved__Params {
  _event: PaymentTokenRemoved;

  constructor(event: PaymentTokenRemoved) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NftMarketplace__getListingResultValue0Struct extends ethereum.Tuple {
  get seller(): Address {
    return this[0].toAddress();
  }

  get nftPrice(): BigInt {
    return this[1].toBigInt();
  }

  get paymentTokenAddresses(): Array<Address> {
    return this[2].toAddressArray();
  }
}

export class NftMarketplace__getPaymentTokenResultValue0Struct extends ethereum.Tuple {
  get priceFeedAddress(): Address {
    return this[0].toAddress();
  }

  get decimals(): i32 {
    return this[1].toI32();
  }
}

export class NftMarketplace extends ethereum.SmartContract {
  static bind(address: Address): NftMarketplace {
    return new NftMarketplace("NftMarketplace", address);
  }

  getEligibleFunds(addr: Address): BigInt {
    let result = super.call(
      "getEligibleFunds",
      "getEligibleFunds(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigInt();
  }

  try_getEligibleFunds(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEligibleFunds",
      "getEligibleFunds(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getListing(
    nftAddr: Address,
    tokenId: BigInt
  ): NftMarketplace__getListingResultValue0Struct {
    let result = super.call(
      "getListing",
      "getListing(address,uint256):((address,uint256,address[]))",
      [
        ethereum.Value.fromAddress(nftAddr),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return changetype<NftMarketplace__getListingResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getListing(
    nftAddr: Address,
    tokenId: BigInt
  ): ethereum.CallResult<NftMarketplace__getListingResultValue0Struct> {
    let result = super.tryCall(
      "getListing",
      "getListing(address,uint256):((address,uint256,address[]))",
      [
        ethereum.Value.fromAddress(nftAddr),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NftMarketplace__getListingResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getPaymentToken(
    addr: Address
  ): NftMarketplace__getPaymentTokenResultValue0Struct {
    let result = super.call(
      "getPaymentToken",
      "getPaymentToken(address):((address,uint8))",
      [ethereum.Value.fromAddress(addr)]
    );

    return changetype<NftMarketplace__getPaymentTokenResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPaymentToken(
    addr: Address
  ): ethereum.CallResult<NftMarketplace__getPaymentTokenResultValue0Struct> {
    let result = super.tryCall(
      "getPaymentToken",
      "getPaymentToken(address):((address,uint8))",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NftMarketplace__getPaymentTokenResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getState(): i32 {
    let result = super.call("getState", "getState():(uint8)", []);

    return result[0].toI32();
  }

  try_getState(): ethereum.CallResult<i32> {
    let result = super.tryCall("getState", "getState():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getTokenAmountFromEthAmount(
    ethAmount: BigInt,
    tokenAddress: Address
  ): BigInt {
    let result = super.call(
      "getTokenAmountFromEthAmount",
      "getTokenAmountFromEthAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(ethAmount),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTokenAmountFromEthAmount(
    ethAmount: BigInt,
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenAmountFromEthAmount",
      "getTokenAmountFromEthAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(ethAmount),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVersion(): i32 {
    let result = super.call("getVersion", "getVersion():(uint8)", []);

    return result[0].toI32();
  }

  try_getVersion(): ethereum.CallResult<i32> {
    let result = super.tryCall("getVersion", "getVersion():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddPaymentTokenCall extends ethereum.Call {
  get inputs(): AddPaymentTokenCall__Inputs {
    return new AddPaymentTokenCall__Inputs(this);
  }

  get outputs(): AddPaymentTokenCall__Outputs {
    return new AddPaymentTokenCall__Outputs(this);
  }
}

export class AddPaymentTokenCall__Inputs {
  _call: AddPaymentTokenCall;

  constructor(call: AddPaymentTokenCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get priceFeedAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get decimals(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class AddPaymentTokenCall__Outputs {
  _call: AddPaymentTokenCall;

  constructor(call: AddPaymentTokenCall) {
    this._call = call;
  }
}

export class AddPaymentTokenAtListingCall extends ethereum.Call {
  get inputs(): AddPaymentTokenAtListingCall__Inputs {
    return new AddPaymentTokenAtListingCall__Inputs(this);
  }

  get outputs(): AddPaymentTokenAtListingCall__Outputs {
    return new AddPaymentTokenAtListingCall__Outputs(this);
  }
}

export class AddPaymentTokenAtListingCall__Inputs {
  _call: AddPaymentTokenAtListingCall;

  constructor(call: AddPaymentTokenAtListingCall) {
    this._call = call;
  }

  get nftAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get paymentTokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddPaymentTokenAtListingCall__Outputs {
  _call: AddPaymentTokenAtListingCall;

  constructor(call: AddPaymentTokenAtListingCall) {
    this._call = call;
  }
}

export class BuyNftErc20Call extends ethereum.Call {
  get inputs(): BuyNftErc20Call__Inputs {
    return new BuyNftErc20Call__Inputs(this);
  }

  get outputs(): BuyNftErc20Call__Outputs {
    return new BuyNftErc20Call__Outputs(this);
  }
}

export class BuyNftErc20Call__Inputs {
  _call: BuyNftErc20Call;

  constructor(call: BuyNftErc20Call) {
    this._call = call;
  }

  get nftAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get paymentTokenIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyNftErc20Call__Outputs {
  _call: BuyNftErc20Call;

  constructor(call: BuyNftErc20Call) {
    this._call = call;
  }
}

export class BuyNftEthCall extends ethereum.Call {
  get inputs(): BuyNftEthCall__Inputs {
    return new BuyNftEthCall__Inputs(this);
  }

  get outputs(): BuyNftEthCall__Outputs {
    return new BuyNftEthCall__Outputs(this);
  }
}

export class BuyNftEthCall__Inputs {
  _call: BuyNftEthCall;

  constructor(call: BuyNftEthCall) {
    this._call = call;
  }

  get nftAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyNftEthCall__Outputs {
  _call: BuyNftEthCall;

  constructor(call: BuyNftEthCall) {
    this._call = call;
  }
}

export class CancelListingCall extends ethereum.Call {
  get inputs(): CancelListingCall__Inputs {
    return new CancelListingCall__Inputs(this);
  }

  get outputs(): CancelListingCall__Outputs {
    return new CancelListingCall__Outputs(this);
  }
}

export class CancelListingCall__Inputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }

  get nftAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelListingCall__Outputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ListNftCall extends ethereum.Call {
  get inputs(): ListNftCall__Inputs {
    return new ListNftCall__Inputs(this);
  }

  get outputs(): ListNftCall__Outputs {
    return new ListNftCall__Outputs(this);
  }
}

export class ListNftCall__Inputs {
  _call: ListNftCall;

  constructor(call: ListNftCall) {
    this._call = call;
  }

  get nftAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get nftPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get allowedPaymentTokens(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }
}

export class ListNftCall__Outputs {
  _call: ListNftCall;

  constructor(call: ListNftCall) {
    this._call = call;
  }
}

export class RemovePaymentTokenCall extends ethereum.Call {
  get inputs(): RemovePaymentTokenCall__Inputs {
    return new RemovePaymentTokenCall__Inputs(this);
  }

  get outputs(): RemovePaymentTokenCall__Outputs {
    return new RemovePaymentTokenCall__Outputs(this);
  }
}

export class RemovePaymentTokenCall__Inputs {
  _call: RemovePaymentTokenCall;

  constructor(call: RemovePaymentTokenCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemovePaymentTokenCall__Outputs {
  _call: RemovePaymentTokenCall;

  constructor(call: RemovePaymentTokenCall) {
    this._call = call;
  }
}

export class RemovePaymentTokenAtListingCall extends ethereum.Call {
  get inputs(): RemovePaymentTokenAtListingCall__Inputs {
    return new RemovePaymentTokenAtListingCall__Inputs(this);
  }

  get outputs(): RemovePaymentTokenAtListingCall__Outputs {
    return new RemovePaymentTokenAtListingCall__Outputs(this);
  }
}

export class RemovePaymentTokenAtListingCall__Inputs {
  _call: RemovePaymentTokenAtListingCall;

  constructor(call: RemovePaymentTokenAtListingCall) {
    this._call = call;
  }

  get nftAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get index(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemovePaymentTokenAtListingCall__Outputs {
  _call: RemovePaymentTokenAtListingCall;

  constructor(call: RemovePaymentTokenAtListingCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetStateCall extends ethereum.Call {
  get inputs(): SetStateCall__Inputs {
    return new SetStateCall__Inputs(this);
  }

  get outputs(): SetStateCall__Outputs {
    return new SetStateCall__Outputs(this);
  }
}

export class SetStateCall__Inputs {
  _call: SetStateCall;

  constructor(call: SetStateCall) {
    this._call = call;
  }

  get newState(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetStateCall__Outputs {
  _call: SetStateCall;

  constructor(call: SetStateCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateListingPriceCall extends ethereum.Call {
  get inputs(): UpdateListingPriceCall__Inputs {
    return new UpdateListingPriceCall__Inputs(this);
  }

  get outputs(): UpdateListingPriceCall__Outputs {
    return new UpdateListingPriceCall__Outputs(this);
  }
}

export class UpdateListingPriceCall__Inputs {
  _call: UpdateListingPriceCall;

  constructor(call: UpdateListingPriceCall) {
    this._call = call;
  }

  get nftAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateListingPriceCall__Outputs {
  _call: UpdateListingPriceCall;

  constructor(call: UpdateListingPriceCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall extends ethereum.Call {
  get inputs(): WithdrawFundsCall__Inputs {
    return new WithdrawFundsCall__Inputs(this);
  }

  get outputs(): WithdrawFundsCall__Outputs {
    return new WithdrawFundsCall__Outputs(this);
  }
}

export class WithdrawFundsCall__Inputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall__Outputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}
